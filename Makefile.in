# $Id$

CFLAGS		= @CFLAGS@
LDFLAGS		= @LDFLAGS@ @POW_LDFLAGS@
LIBS		= @LIBS@

PYTHON		= @PYTHON@
INSTALL		= @INSTALL@ -m 555 

prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
datadir		= @datadir@
localstatedir	= @localstatedir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@
bindir		= @bindir@
sbindir		= @sbindir@
libexecdir	= @libexecdir@
sysconfdir	= @sysconfdir@

abs_builddir	= @abs_builddir@
abs_top_srcdir	= @abs_top_srcdir@
abs_top_builddir= @abs_top_builddir@
srcdir          = @srcdir@

OPENSSL_TARGET	= @OPENSSL_TARGET@
RP_TARGET	= @RP_TARGET@
CA_TARGET	= @CA_TARGET@

SETUP_PY_INSTALL_LAYOUT = @SETUP_PY_INSTALL_LAYOUT@

POW_SO		= rpki/POW/_POW.so

# Generic targets.  The macros are to deal with ./configure options.

default: all

all: VERSION rpki/autoconf.py setup_autoconf.py ${RP_TARGET}-all ${CA_TARGET}-all 

clean: ${RP_TARGET}-clean ${CA_TARGET}-clean 
	rm -rf build dist autom4te.cache rpki/autoconf.py setup_autoconf.py setup_autoconf.pyc

test: all ${RP_TARGET}-test ${CA_TARGET}-test 

distclean: clean ${RP_TARGET}-distclean ${CA_TARGET}-distclean 
	rm -f Makefile config.log config.status

install: ${RP_TARGET}-install ${CA_TARGET}-install 

deinstall: ${RP_TARGET}-deinstall ${CA_TARGET}-deinstall 

uninstall: deinstall

# Harmless do-nothing targets to simplify the macro-based mess above.

noop-all noop-clean noop-test noop-distclean noop-install noop-deinstall:
	@true

# Targets for the RP package.  This includes the libraries, thus the bulk
# of the code, although some of it won't run without dependencies and setup
# that only come with the CA package.

rp-all:		h-all schemas-all ${OPENSSL_TARGET}-all rpki-all
	cd rp; ${MAKE} all

rp-clean:	${OPENSSL_TARGET}-clean rpki-clean
	cd rp; ${MAKE} clean

rp-test:	${OPENSSL_TARGET}-test rpki-test
	cd rp; ${MAKE} test

rp-distclean:	${OPENSSL_TARGET}-distclean rpki-distclean
	cd rp; ${MAKE} distclean

rp-install:	rpki-install
	cd rp; ${MAKE} install

rp-deinstall:	rpki-deinstall
	cd rp; ${MAKE} deinstall


# Targets for the CA package.

ca-all:
	cd ca; ${MAKE} all

ca-clean:
	cd ca; ${MAKE} clean

ca-test:
	cd ca; ${MAKE} test

ca-distclean:
	cd ca; ${MAKE} distclean

ca-install:
	cd ca; ${MAKE} install

ca-deinstall:
	cd ca; ${MAKE} deinstall

# Supporting targets.  First pass on a lot of this is going to look
# very silly, will simplify after this is working.

h-all:
	cd h; ${MAKE} all

schemas-all:
	cd schemas; ${MAKE} all

openssl-all:
	cd openssl; ${MAKE} all

openssl-clean:
	cd openssl; ${MAKE} clean

openssl-test:
	cd openssl; ${MAKE} test

openssl-distclean:
	cd openssl; ${MAKE} distclean


rpki-all: setup_autoconf.py ${POW_SO} build/stamp

rpki-clean:
	rm -rf build dist ${POW_SO}
	find . -type f -name '*.py[co]' -delete

rpki-test: unit-tests

rpki-distclean:
	@true

rpki-install:
	@false

rpki-deinstall:
	@false

###

VERSION: .FORCE
	${PYTHON} buildtools/make-version.py

rpki/autoconf.py: Makefile
	@echo 'Generating $@';							\
	(echo '# Automatically generated.  DO NOT EDIT.';			\
	 echo ;									\
	 echo 'bindir	      = "${bindir}"';					\
	 echo 'datarootdir    = "${datarootdir}"';				\
	 echo 'localstatedir  = "${localstatedir}"';				\
	 echo 'sbindir	      = "${sbindir}"';					\
	 echo 'sharedstatedir = "${sharedstatedir}"';				\
	 echo 'sysconfdir     = "${sysconfdir}"';				\
	 echo 'libexecdir     = "${libexecdir}"';				\
	 echo ;									\
	 echo 'WSGI_DAEMON_PROCESS	    = "${WSGI_DAEMON_PROCESS}"';	\
	 echo 'WSGI_PROCESS_GROUP	    = "${WSGI_PROCESS_GROUP}"';		\
	 echo 'RCYNIC_HTML_DIR		    = "${RCYNIC_HTML_DIR}"';		\
	 echo 'APACHE_VERSION		    = "${APACHE_VERSION}"';		\
	 echo 'WSGI_PYTHON_EGG_CACHE_DIR    = "${WSGI_PYTHON_EGG_CACHE_DIR}"';	\
	 echo 'WSGI_PYTHON_EGG_CACHE_USER   = "${WSGI_PYTHON_EGG_CACHE_USER}"';	\
	) > $@

setup_autoconf.py: rpki/autoconf.py
	@echo 'Generating $@';					\
	(cat rpki/autoconf.py;					\
	 echo ;							\
	 echo 'CFLAGS         = """${CFLAGS}"""';               \
	 echo 'LDFLAGS        = """${LDFLAGS}"""';              \
	 echo 'LIBS           = """${LIBS}"""';                 \
	) > $@

SETUP_PY_ROOT = `${PYTHON} -c 'import sys; print "--root " + sys.argv[1] if sys.argv[1] else ""' '${DESTDIR}'`

.FORCE:

${POW_SO}: .FORCE setup_autoconf.py
	${PYTHON} setup.py build_ext --inplace

build/stamp: .FORCE setup_autoconf.py
	${PYTHON} setup.py build
	touch $@

unit-tests: all
	@echo Running unit tests
	PWD=`pwd`; for i in rpki/*.py; do echo "[$$i]"; PYTHONPATH=$$PWD ${PYTHON} $$i; done

lint:
	find rpki -name '*.py' | xargs pylint --rcfile ${abs_top_srcdir}/buildtools/pylint.rc

tags: Makefile
	find rpki rp ca schemas -type f \
		\( -name '*.[ch] -o -name '*.py' -o -name '*.sql' -o -name '*.rnc' \) \
		! -name relaxng.py ! -name sql_schemas.py -print | \
	etags -

#!/bin/sh
# postinst script for rpki-ca
#
# see: dh_installdeb(1)

set -e

setup_rpkid_user() {
    if ! getent passwd rpkid >/dev/null
    then
	useradd -g rpkid -M -N -d /nonexistent -s /sbin/nologin -c "RPKI certification authority engine(s)" rpkid
    fi
}

setup_rpkid_group() {
    if ! getent group rpkid >/dev/null
    then
	groupadd rpkid
    fi
}

setup_apache() {
    # Edit existing file
    f=/etc/apache2/sites-available/default-ssl
    conf=/etc/rpki/apache.conf
    cmd=no
    if test "$(grep "[^#]*Include $conf" $f 2>/dev/null)" = ""
    then
        awk < $f > ${f}.tmp -v conf=$conf '
	    $0 ~ /[^#]*<\/VirtualHost>/ { print "Include", conf }
            { print }
	'
        if test ! -f ${f}.orig
        then
            ln $f ${f}.orig
        fi
        mv ${f}.tmp $f
        cmd=reload
    fi
    if test ! -f /etc/apache2/sites-enabled/default-ssl
    then
        a2ensite default-ssl
        cmd=reload
    fi
    if test ! -f /etc/apache2/mods-enabled/ssl.conf
    then
        a2enmod ssl
        cmd=restart
    fi
    if test $cmd != no
    then
        service apache2 $cmd
    fi
}

setup_rpki_conf() {
    # Update /etc/rpki.conf.sample for this system, and copy it to
    # /etc/rpki.conf if no configuration file exists yet.

    # We don't (yet) have the ability to merge in settings from an
    # existing rpki.conf, so we generate a new secret_key and a new
    # SQL password every time, but that's harmless so long as we're
    # careful not to overwrite an existing configuration.

    mysql_passwd=`python -c 'import random, string; print "".join(random.choice(string.uppercase + string.lowercase + string.digits) for _ in xrange(16))'`
    secret_key=`python -c 'import random, string; print "".join(random.choice(string.uppercase + string.lowercase + string.digits) for _ in xrange(50))'`

    rpki-confgen --read-xml /etc/rpki/rpki-confgen.xml			\
	--autoconf							\
	--set myrpki::handle=`hostname -f | sed 's/[.]/_/g'`		\
	--set myrpki::rpkid_server_host=`hostname -f`			\
	--set myrpki::pubd_server_host=`hostname -f`			\
	--set myrpki::shared_sql_password="$mysql_passwd"		\
	--set web_portal::secret-key="$secret_key"			\
	--write-conf /etc/rpki.conf.sample

    if test ! -f /etc/rpki.conf
    then
	cp -p /etc/rpki.conf.sample /etc/rpki.conf
    fi
}

setup_mysql() {
    rpki-sql-setup --missing_only --mysql_defaults /etc/mysql/debian.cnf
}

setup_bpki() {
    rpkic initialize_server_bpki
}

setup_django() {
    rpki-manage syncdb --noinput
    rpki-manage migrate app
}

setup_cron() {
    t=$(hexdump -n 1 -e '"%u"' /dev/urandom) && echo "$(($t % 60)) */2 * * * nobody /usr/share/rpki/routeviews.sh" > /etc/cron.d/rpkigui-routeviews
    chmod 644 /etc/cron.d/rpkigui-routeviews
    ln -sf /usr/lib/rpki/rpkigui-check-expired /etc/cron.daily/rpkigui-check-expired
}

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
	setup_rpkid_group
	setup_rpkid_user
	setup_apache
	setup_rpki_conf
	setup_mysql
	setup_bpki
	setup_django
	setup_cron
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

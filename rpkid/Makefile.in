# $Id$

SUBDIRS		= portal-gui

PYTHON		= @PYTHON@
TRANG		= @TRANG@

CFLAGS		= @CFLAGS@
LDFLAGS		= @LDFLAGS@ @POW_LDFLAGS@
LIBS		= @LIBS@

INSTALL		= @INSTALL@ -m 555 

prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
datadir		= @datadir@
localstatedir	= @localstatedir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@
bindir		= @bindir@
sbindir		= @sbindir@
libexecdir	= @libexecdir@
sysconfdir	= @sysconfdir@

abs_builddir	= @abs_builddir@
abs_top_srcdir	= @abs_top_srcdir@
abs_top_builddir= @abs_top_builddir@
srcdir          = @srcdir@

RPKID_INSTALL_TARGETS	= @RPKID_INSTALL_TARGETS@

SETUP_PY_INSTALL_LAYOUT = @SETUP_PY_INSTALL_LAYOUT@

SETUP_PY_ROOT = `${PYTHON} -c 'import sys; print "--root " + sys.argv[1] if sys.argv[1] else ""' '${DESTDIR}'`

POW_SO = rpki/POW/_POW.so

all:: rpki/autoconf.py ${POW_SO} rpki/relaxng.py myrpki.rng rpki/sql_schemas.py

${POW_SO}: ext/POW.c setup.py setup_autoconf.py
	${PYTHON} setup.py build_ext --inplace

clean::
	rm -rf ${POW_SO} build dist

RNGS = left-right-schema.rng up-down-schema.rng publication-schema.rng myrpki.rng

rpki/relaxng.py: ${abs_top_srcdir}/buildtools/make-relaxng.py ${RNGS}
	${PYTHON} ${abs_top_srcdir}/buildtools/make-relaxng.py ${RNGS} >$@.tmp
	mv $@.tmp $@

left-right-schema.rng: left-right-schema.rnc
	${TRANG} left-right-schema.rnc left-right-schema.rng

up-down-schema.rng: up-down-schema.rnc
	${TRANG} up-down-schema.rnc up-down-schema.rng

publication-schema.rng: publication-schema.rnc
	${TRANG} publication-schema.rnc publication-schema.rng

myrpki.rng: myrpki.rnc
	${TRANG} myrpki.rnc myrpki.rng

rpki/sql_schemas.py: ${abs_top_srcdir}/buildtools/make-sql-schemas.py rpkid.sql pubd.sql
	${PYTHON} ${abs_top_srcdir}/buildtools/make-sql-schemas.py >$@.tmp
	mv $@.tmp $@

clean::
	find . -type f -name '*.py[co]' -delete
	cd tests; $(MAKE) $@

install:: ${RPKID_INSTALL_TARGETS}

install-always:: all
	${PYTHON} setup.py install ${SETUP_PY_ROOT} ${SETUP_PY_INSTALL_LAYOUT} --record installed
	@echo
	@echo "== Default configuration file location is ${sysconfdir}/rpki.conf =="
	@echo

uninstall deinstall::
	xargs rm -fv <installed

distclean::
	rm -f installed

dont-run-trang:
	touch *.rng

relaxng: left-right-schema.rng up-down-schema.rng publication-schema.rng
	cd tests; $(MAKE) protocol-samples
	xmllint --noout --relaxng  left-right-schema.rng  tests/left-right-protocol-samples/*.xml
	xmllint --noout --relaxng     up-down-schema.rng     tests/up-down-protocol-samples/*.xml
	xmllint --noout --relaxng publication-schema.rng tests/publication-protocol-samples/*.xml

unit-tests: all
	PWD=`pwd`; for i in rpki/*.py; do echo "[$$i]"; PYTHONPATH=$$PWD ${PYTHON} $$i; done

all-tests:: unit-tests

all-tests:: relaxng

test all-tests parse-test profile yamltest yamlconf:: all
	cd tests; $(MAKE) $@

tags: Makefile
	find . -type f \( -name '*.py' -o -name '*.sql' -o -name '*.rnc' -o -name '*.py.in' \) ! -name relaxng.py ! -name sql_schemas.py | etags -

lint:
	pylint --rcfile ${abs_top_srcdir}/buildtools/pylint.rc rpki/*.py rpki/irdb/*.py *.py tests/*.py

# Documentation

doc/pubd.dot: pubd.sql
	sh ${abs_top_srcdir}/buildtools/graphviz-sql.sh $? >$@

doc/rpkid.dot: rpkid.sql
	sh ${abs_top_srcdir}/buildtools/graphviz-sql.sh $? >$@

.SUFFIXES: .dot .png .pdf .eps

.dot.pdf:
	dot -Tps2 $? | ps2pdf - $@

.dot.eps:
	dot -o $@ -Teps $?

.dot.png:
	dot -o $@ -Tpng $?

dot: doc/pubd.dot doc/rpkid.dot

eps: doc/pubd.eps doc/rpkid.eps doc/rpkid-bpki.eps doc/pubd-bpki.eps

png: doc/pubd.png doc/rpkid.png doc/rpkid-bpki.png doc/pubd-bpki.png

pdf: doc/pubd.pdf doc/rpkid.pdf doc/rpkid-bpki.pdf doc/pubd-bpki.pdf

docclean:
	rm -rf doc/html doc/latex doc/xml
	rm -f  doc/*.eps doc/*.pdf doc/*.png
	rm -f doc/pubd.dot doc/rpkid.dot

html: dot eps png
	TZ='' IMAGE_PATH=${abs_builddir}/doc doxygen

docs: dot eps png html pdf

##

distclean:: clean docclean
	cd tests; ${MAKE} $@
	rm -f TAGS Makefile

all install clean test distclean deinstall uninstall::
	@for i in ${SUBDIRS}; do echo "Making $@ in $$i"; (cd $$i && ${MAKE} $@); done

all:: examples/rpki.conf

examples/rpki.conf: rpki/autoconf.py rpki-confgen rpki-confgen.xml
	${PYTHON} rpki-confgen \
		--read-xml rpki-confgen.xml \
		--autoconf \
		--set myrpki::handle=`hostname -f | sed 's/[.]/_/g'` \
		--set myrpki::rpkid_server_host=`hostname -f` \
		--set myrpki::pubd_server_host=`hostname -f` \
		--pwgen myrpki::shared_sql_password \
		--pwgen web_portal::secret-key \
		--write-conf $@

install-always::
	${INSTALL} examples/rpki.conf ${DESTDIR}${sysconfdir}/rpki.conf.sample
	${INSTALL} -d ${DESTDIR}${datarootdir}/rpki/publication

clean::
	rm -f examples/rpki.conf

rpki/autoconf.py: Makefile
	@echo 'Generating $@';					\
	(echo '# Automatically generated.  DO NOT EDIT.';	\
	 echo 'bindir         = "${bindir}"';			\
	 echo 'datarootdir    = "${datarootdir}"';		\
	 echo 'localstatedir  = "${localstatedir}"';		\
	 echo 'sbindir        = "${sbindir}"';			\
	 echo 'sharedstatedir = "${sharedstatedir}"';		\
	 echo 'sysconfdir     = "${sysconfdir}"';		\
	 echo 'libexecdir     = "${libexecdir}"';		\
	) > $@

clean::
	rm -f rpki/autoconf.py

setup_autoconf.py: rpki/autoconf.py
	@echo 'Generating $@';					\
	(cat rpki/autoconf.py;					\
	 echo 'CFLAGS         = """${CFLAGS}"""';               \
	 echo 'LDFLAGS        = """${LDFLAGS}"""';              \
	 echo 'LIBS           = """${LIBS}"""';                 \
	) > $@

clean::
	rm -f setup_autoconf.py setup_autoconf.pyc

install-postconf: \
	install-user install-apache install-mysql install-bpki install-django install-cron

# This should create user "rpkid" and group "rpkid", but as we have
# not yet tested our ability to run in such a configuration, this
# would be a little premature.  Can steal Makefile code for this from
# rcynic when we're ready to do something with it.
install-user:
	@true

# This needs to do whatever is needed to get the web UI configured
# under Apache on this platform.  Likely to be an awful mess, see
# Ubuntu rpki-ca.postinst for details.
install-apache:
	@true

# This just runs rpki-mysql-setup, but we should figure out a way for
# that to avoid prompting us for the SQL root password when we don't
# really need it.
install-mysql:
	@true
#	${sbindir}/rpki-sql-setup

install-bpki:
	@true
#	${sbindir}/rpkic initialize_server_bpki

install-django:
	@true
#	${sbindir}/rpki-manage syncdb --noinput
#	${sbindir}/rpki-manage migrate app

# This needs to set up crontab entries for rpkigui-check-expired,
# rpkigui-import-routes, and rpkic update_bpki.  They probably don't
# want run under the same user IDs either, so what with having to use
# /usr/bin/crontab on some platforms, this should be entirely too
# entertaining.  Might be ok to run them all as user rpkid eventually.
install-cron:
	@true

# $Id$

SUBDIRS		= portal-gui

PYTHON		= @PYTHON@
TRANG		= @TRANG@

CFLAGS		= @CFLAGS@
LDFLAGS		= @LDFLAGS@ @POW_LDFLAGS@
LIBS		= @LIBS@

INSTALL		= @INSTALL@ -m 555 

prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@
datadir		= @datadir@
localstatedir	= @localstatedir@
sharedstatedir	= @sharedstatedir@
sysconfdir	= @sysconfdir@
bindir		= @bindir@
sbindir		= @sbindir@
libexecdir	= @libexecdir@
sysconfdir	= @sysconfdir@

abs_builddir	= @abs_builddir@
abs_top_srcdir	= @abs_top_srcdir@
abs_top_builddir= @abs_top_builddir@
srcdir          = @srcdir@

SETUP_PY_INSTALL_LAYOUT = @SETUP_PY_INSTALL_LAYOUT@

# PID files seem to go into /var/run/ on every platform we support.
# We could make this an autoconf substitution if anything ever cares,
# but let's keep it simple for now.

PID_DIR		= ${DESTDIR}/var/run/rpkid

SETUP_PY = \
	AC_CFLAGS='${CFLAGS}' \
	AC_LDFLAGS='${LDFLAGS}' \
	AC_LIBS='${LIBS}' \
	AC_SBINDIR='${sbindir}' \
	AC_SCRIPTS='${SCRIPTS}' \
	AC_DATA_FILES='${DATA_FILES}' \
	AC_CONF_FILES='${CONF_FILES}' \
	AC_ABS_BUILDDIR='${abs_builddir}' \
	AC_LIBEXECDIR='${libexecdir}' \
	AC_DATAROOTDIR='${datarootdir}/rpki' \
	AC_SYSCONFDIR='${sysconfdir}/rpki' \
	${PYTHON} setup.py

SETUP_PY_ROOT = `${PYTHON} -c 'import sys; print "--root " + sys.argv[1] if sys.argv[1] else ""' '${DESTDIR}'`

POW_SO	= rpki/POW/_POW.so

SCRIPTS = \
	rpki-sql-backup rpki-sql-setup rpki-start-servers irbe_cli irdbd \
	pubd rootd rpkic rpkid rpki-confgen \
	portal-gui/scripts/rpkigui-import-routes \
	portal-gui/scripts/rpkigui-check-expired \
	portal-gui/scripts/rpkigui-rcynic \
	portal-gui/scripts/rpki-manage

# scripts we build, but don't install
BUILD_SCRIPTS = \
	portal-gui/rpki.wsgi \
	rpki/autoconf.py

# these files get put in ${datarootdir}/rpki
DATA_FILES = portal-gui/routeviews.sh

# these files get put in ${sysconfdir}/rpki
CONF_FILES = portal-gui/apache.conf rpki-confgen.xml

all:: ${POW_SO} rpki/relaxng.py myrpki.rng rpki/sql_schemas.py ${SCRIPTS} ${BUILD_SCRIPTS}

${POW_SO}: ext/POW.c setup.py setup_autoconf.py
	${SETUP_PY} build_ext --inplace

clean::
	rm -rf ${POW_SO} build dist

RNGS = left-right-schema.rng up-down-schema.rng publication-schema.rng myrpki.rng

rpki/relaxng.py: ${abs_top_srcdir}/buildtools/make-relaxng.py ${RNGS}
	${PYTHON} ${abs_top_srcdir}/buildtools/make-relaxng.py ${RNGS} >$@.tmp
	mv $@.tmp $@

left-right-schema.rng: left-right-schema.rnc
	${TRANG} left-right-schema.rnc left-right-schema.rng

up-down-schema.rng: up-down-schema.rnc
	${TRANG} up-down-schema.rnc up-down-schema.rng

publication-schema.rng: publication-schema.rnc
	${TRANG} publication-schema.rnc publication-schema.rng

myrpki.rng: myrpki.rnc
	${TRANG} myrpki.rnc myrpki.rng

rpki/sql_schemas.py: ${abs_top_srcdir}/buildtools/make-sql-schemas.py rpkid.sql pubd.sql
	${PYTHON} ${abs_top_srcdir}/buildtools/make-sql-schemas.py >$@.tmp
	mv $@.tmp $@

clean::
	find . -type f -name '*.py[co]' -delete
	cd tests; $(MAKE) $@
	rm -f ${SCRIPTS} ${SETTINGS} ${BUILD_SCRIPTS}

install:: all
	${SETUP_PY} install ${SETUP_PY_ROOT} ${SETUP_PY_INSTALL_LAYOUT} --record installed
	@echo
	@echo "== Default configuration file location is ${sysconfdir}/rpki.conf =="
	@echo
#
# We used to do this, but Debian/Ubuntu lintian complained that
# /var/run may be a temporary filesystem, thus directories like this
# should be created at boot.  Fair point.
#
#	if test -d ${PID_DIR}; then :; else ${INSTALL} -d ${PID_DIR}; fi

uninstall deinstall::
	xargs rm -fv <installed

distclean::
	rm -f installed

dont-run-trang:
	touch *.rng

relaxng: left-right-schema.rng up-down-schema.rng publication-schema.rng
	cd tests; $(MAKE) protocol-samples
	xmllint --noout --relaxng  left-right-schema.rng  tests/left-right-protocol-samples/*.xml
	xmllint --noout --relaxng     up-down-schema.rng     tests/up-down-protocol-samples/*.xml
	xmllint --noout --relaxng publication-schema.rng tests/publication-protocol-samples/*.xml

unit-tests: all
	PWD=`pwd`; for i in rpki/*.py; do echo "[$$i]"; PYTHONPATH=$$PWD ${PYTHON} $$i; done

all-tests:: unit-tests

all-tests:: relaxng

test all-tests parse-test profile yamltest yamlconf:: all
	cd tests; $(MAKE) $@

tags: Makefile
	find . -type f \( -name '*.py' -o -name '*.sql' -o -name '*.rnc' -o -name '*.py.in' \) ! -name relaxng.py ! -name sql_schemas.py | etags -

lint:
	pylint --rcfile ${abs_top_srcdir}/buildtools/pylint.rc rpki/*.py rpki/irdb/*.py *.py tests/*.py

# Documentation

doc/pubd.dot: pubd.sql
	sh ${abs_top_srcdir}/buildtools/graphviz-sql.sh $? >$@

doc/rpkid.dot: rpkid.sql
	sh ${abs_top_srcdir}/buildtools/graphviz-sql.sh $? >$@

.SUFFIXES: .dot .png .pdf .eps

.dot.pdf:
	dot -Tps2 $? | ps2pdf - $@

.dot.eps:
	dot -o $@ -Teps $?

.dot.png:
	dot -o $@ -Tpng $?

dot: doc/pubd.dot doc/rpkid.dot

eps: doc/pubd.eps doc/rpkid.eps doc/rpkid-bpki.eps doc/pubd-bpki.eps

png: doc/pubd.png doc/rpkid.png doc/rpkid-bpki.png doc/pubd-bpki.png

pdf: doc/pubd.pdf doc/rpkid.pdf doc/rpkid-bpki.pdf doc/pubd-bpki.pdf

docclean:
	rm -rf doc/html doc/latex doc/xml
	rm -f  doc/*.eps doc/*.pdf doc/*.png
	rm -f doc/pubd.dot doc/rpkid.dot

html: dot eps png
	TZ='' IMAGE_PATH=${abs_builddir}/doc doxygen

docs: dot eps png html pdf

##

distclean:: clean docclean
	cd tests; ${MAKE} $@
	rm -f TAGS Makefile

all install clean test distclean deinstall uninstall::
	@for i in ${SUBDIRS}; do echo "Making $@ in $$i"; (cd $$i && ${MAKE} $@); done

all:: examples/rpki.conf

# Source: http://blog.leosoto.com/2008/04/django-secretkey-generation.html

GENERATE_DJANGO_SECRET_KEY = ${PYTHON} -c 'import random, string; print "".join(random.choice(string.uppercase + string.lowercase + string.digits) for _ in xrange(50))'

examples/rpki.conf: rpki/autoconf.py rpki-confgen.py rpki-confgen.xml
	${PYTHON} rpki-confgen.py \
		--read-xml rpki-confgen.xml \
		--autoconf \
		--set myrpki::handle=`hostname -f | sed 's/[.]/_/g'` \
		--set myrpki::rpkid_server_host=`hostname -f` \
		--set myrpki::pubd_server_host=`hostname -f` \
		--set web_portal::secret-key=`${GENERATE_DJANGO_SECRET_KEY}` \
		--write-conf $@

install::
	${INSTALL} examples/rpki.conf ${DESTDIR}${sysconfdir}/rpki.conf.sample
	${INSTALL} -d ${DESTDIR}${datarootdir}/rpki/publication

clean::
	rm -f examples/rpki.conf

# Scripts.  This whole business of copying scripts is a holdover from
# a more complex build process which we haven't quite finished
# cleaning up yet.  In theory, eventually this will all be handled by
# setup.py without any need for copying anything here.

COPY_SCRIPT = cp -pf $? $@; chmod 555 $@

rpki-sql-backup: rpki-sql-backup.py
	${COPY_SCRIPT}

rpki-sql-setup: rpki-sql-setup.py
	${COPY_SCRIPT}

rpki-start-servers: rpki-start-servers.py
	${COPY_SCRIPT}

irbe_cli: irbe_cli.py
	${COPY_SCRIPT}

irdbd: irdbd.py
	${COPY_SCRIPT}

pubd: pubd.py
	${COPY_SCRIPT}

rootd: rootd.py
	${COPY_SCRIPT}

rpkic: rpkic.py
	${COPY_SCRIPT}

rpkid: rpkid.py
	${COPY_SCRIPT}

rpki-confgen: rpki-confgen.py
	${COPY_SCRIPT}

# These are here for legacy reasons, but no longer required.  The problem is
# that anyone with an existing copy of the repository will already have
# previously built files by these names, so I can't rename them in the
# repository, or svn will abort when the user tries to update.
portal-gui/scripts/rpkigui-rcynic: portal-gui/scripts/rpkigui-rcynic.py
	${COPY_SCRIPT}

portal-gui/scripts/rpkigui-import-routes: portal-gui/scripts/rpkigui-import-routes.py
	${COPY_SCRIPT}

portal-gui/scripts/rpkigui-check-expired: portal-gui/scripts/rpkigui-check-expired.py
	${COPY_SCRIPT}

portal-gui/rpki.wsgi: ${srcdir}/portal-gui/rpki.wsgi.in
	${COPY_SCRIPT}

portal-gui/scripts/rpki-manage: ${srcdir}/portal-gui/scripts/rpki-manage.py
	${COPY_SCRIPT}

rpki/autoconf.py: Makefile
	@echo 'Generating $@';					\
	(echo '# Automatically generated.  DO NOT EDIT.';	\
         echo 'bindir         = "${bindir}"';			\
	 echo 'datarootdir    = "${datarootdir}"';		\
	 echo 'localstatedir  = "${localstatedir}"';		\
	 echo 'sbindir        = "${sbindir}"';			\
	 echo 'sharedstatedir = "${sharedstatedir}"';		\
	 echo 'sysconfdir     = "${sysconfdir}"';		\
	 echo 'libexecdir     = "${libexecdir}"';		\
	) > $@

setup_autoconf.py: rpki/autoconf.py
	@echo 'Generating $@';					\
	(cat rpki/autoconf.py;					\
	 echo 'CFLAGS         = """${CFLAGS}"""';		\
	 echo 'LDFLAGS	      = """${LDFLAGS}"""';		\
	 echo 'LIBS	      = """${LIBS}"""';			\
	) > $@

clean::
	rm -f setup_autoconf.py setup_autoconf.pyc

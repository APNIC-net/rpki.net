# $Id$
# Automatically generated from ./up-down-tighter-schema.pl

     default namespace = "http://www.apnic.net/specs/rescerts/up-down/"

     grammar {
       start = element message {
         attribute version   { xsd:positiveInteger { maxInclusive="1" } },
         attribute sender    { xsd:token { maxLength="1024" } },
         attribute recipient { xsd:token { maxLength="1024" } },
         attribute msg_ref   { xsd:positiveInteger { maxInclusive="999999999999999" } },
         payload
       }

       payload |= attribute type { "list" }, list_request
       payload |= attribute type { "list_response"}, list_response
       payload |= attribute type { "issue" }, issue_request
       payload |= attribute type { "issue_response"}, issue_response
       payload |= attribute type { "revoke" }, revoke_request
       payload |= attribute type { "revoke_response"}, revoke_response
       payload |= attribute type { "error_response"}, error_response

       list_request = empty
       list_response = class*

       class = element class {
         attribute class_name { xsd:token { maxLength="1024" } },
         attribute cert_url { xsd:anyURI { maxLength="1024" } },
         attribute cert_ski { xsd:token { maxLength="1024" } },
         attribute resource_set_as { xsd:string { maxLength="512000" pattern="[0-9]+(,[0-9]+)?" } },
         attribute resource_set_ipv4 { xsd:string { maxLength="512000" pattern="([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]/([0-9]|[12][0-9]|3[0-2])|([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]-([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]" } },
         attribute resource_set_ipv6 { xsd:string { maxLength="512000" pattern="::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})-::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})|::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])" } },
         attribute suggested_sia_head { xsd:string { maxLength="1024" } }?,
         element certificate {
           attribute cert_url { xsd:anyURI { maxLength="1024" } },
           attribute cert_ski { xsd:token { maxLength="1024" } },
           attribute cert_aki { xsd:token { maxLength="1024" } },
           attribute cert_serial { xsd:positiveInteger },
           attribute resource_set_as { xsd:string { maxLength="512000" pattern="[0-9]+(,[0-9]+)?" } },
           attribute resource_set_ipv4 { xsd:string { maxLength="512000" pattern="([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]/([0-9]|[12][0-9]|3[0-2])|([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]-([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]" } },
           attribute resource_set_ipv6 { xsd:string { maxLength="512000" pattern="::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})-::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})|::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])" } },
           attribute req_resource_set_as { xsd:string { maxLength="512000" pattern="[0-9]+(,[0-9]+)?" } }?,
           attribute req_resource_set_ipv4 { xsd:string { maxLength="512000" pattern="([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]/([0-9]|[12][0-9]|3[0-2])|([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]-([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]" } }?,
           attribute req_resource_set_ipv6 { xsd:string { maxLength="512000" pattern="::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})-::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})|::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])" } }?,
           attribute status { "undersize" | "match" | "oversize" },
           xsd:base64Binary { maxLength="512000" }
         }*,
         element issuer { xsd:base64Binary { maxLength="512000" } }
       }

       issue_request = element request {
         attribute class_name { xsd:token { maxLength="1024" } },
         attribute req_resource_set_as { xsd:string { maxLength="512000" pattern="[0-9]+(,[0-9]+)?" } }?,
         attribute req_resource_set_ipv4 { xsd:string { maxLength="512000" pattern="([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]/([0-9]|[12][0-9]|3[0-2])|([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]-([0-9]|1[0-9]|2[0-4]|25[0-5].){3}[0-9]|1[0-9]|2[0-4]|25[0-5]" } }?,
         attribute req_resource_set_ipv6 { xsd:string { maxLength="512000" pattern="::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})-::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})|::|(0|[1-9a-fA-F][0-9a-fA-F]{0,3}:){0,7}(:|0|[1-9a-fA-F][0-9a-fA-F]{0,3})/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])" } }?,
         xsd:base64Binary { maxLength="512000" }
       }
       issue_response = class

       revoke_request = revocation
       revoke_response = revocation

       revocation = element key {
         attribute class_name { xsd:token { maxLength="1024" } },
         attribute ski { xsd:token { maxLength="1024" } }
       }

       error_response =
         element status { xsd:positiveInteger { maxInclusive="999999999999999" } },
         element last_msg_processed { xsd:positiveInteger { maxInclusive="999999999999999" } }?,
         element description { attribute xml:lang { xsd:language }, xsd:string { maxLength="1024" } }?
     }
